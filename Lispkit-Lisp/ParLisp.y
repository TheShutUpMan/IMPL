-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module ParLisp where
import AbsLisp
import LexLisp
import ErrM

}

%name pSExp SExp
%name pSExp1 SExp1
%name pSExp2 SExp2
-- no lexer declaration
%monad { Err } { thenM } { returnM }
%tokentype {Token}
%token
  '(' { PT _ (TS _ 1) }
  '()' { PT _ (TS _ 2) }
  ')' { PT _ (TS _ 3) }
  '.' { PT _ (TS _ 4) }

L_integ  { PT _ (TI $$) }
L_ident  { PT _ (TV $$) }


%%

Integer :: { Integer } : L_integ  { (read ( $1)) :: Integer }
Ident   :: { Ident }   : L_ident  { Ident $1 }

SExp :: { SExp }
SExp : '()' { AbsLisp.SExp1 }
     | SExp1 { AbsLisp.SExpSExp1 $1 }
     | '(' SExp '.' SExp ')' { AbsLisp.SExp2 $2 $4 }
     | '(' SExp2 ')' { AbsLisp.SExp3 $2 }
SExp1 :: { SExp }
SExp1 : Integer { AbsLisp.SExp1Integer $1 }
      | Ident { AbsLisp.SExp1Ident $1 }
SExp2 :: { SExp }
SExp2 : SExp SExp2 { AbsLisp.SExp21 $1 $2 }
      | SExp { AbsLisp.SExp2SExp $1 }
{

returnM :: a -> Err a
returnM = return

thenM :: Err a -> (a -> Err b) -> Err b
thenM = (>>=)

happyError :: [Token] -> Err a
happyError ts =
  Bad $ "syntax error at " ++ tokenPos ts ++ 
  case ts of
    [] -> []
    [Err _] -> " due to lexer error"
    t:_ -> " before `" ++ id(prToken t) ++ "'"

myLexer = tokens
}

