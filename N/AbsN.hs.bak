

module AbsN where

-- Haskell module generated by the BNF converter




newtype Ident = Ident String deriving (Eq, Ord, Show, Read)
data V = Var Ident T
  deriving (Eq, Ord, Show, Read)

data T = Int | Bool
  deriving (Eq, Ord, Show, Read)

data P = Proc Ident [V] [V] S
  deriving (Eq, Ord, Show, Read)

data D = Dvar V | Dpr P
  deriving (Eq, Ord, Show, Read)

data S
    = Skp
    | Prn E
    | Ass Ident E
    | Cho E S S
    | Itr E S
    | Dcl D S
    | Call Ident [E] [Ident]
    | Seq [S]
  deriving (Eq, Ord, Show, Read)

data E
    = Lt E E
    | Eq E E
    | And E E
    | Or E E
    | Not E
    | Fls
    | Tr
    | Sum E E
    | Mul E E
    | Neg E
    | Iex Integer
    | Idex Ident
  deriving (Eq, Ord, Show, Read)

