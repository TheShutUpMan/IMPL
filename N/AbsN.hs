module AbsN where

-- Haskell module generated by the BNF converter




newtype Ident = Ident String deriving (Eq, Ord, Show, Read)
data Stm
    = Skip
    | Prnt Exp
    | Assn Ident Exp
    | Ifte Exp Stm Stm
    | Iter Exp Stm
    | Blck [Dec] [Proc] Stm
    | Call Ident [Exp] [Ident]
    | Seqn [Stm]
  deriving (Eq, Ord, Show, Read)

data Dec = Dcl Ident Type
  deriving (Eq, Ord, Show, Read)

data Type = IntgT | BoolT
  deriving (Eq, Ord, Show, Read)

data Proc = PDcl Ident [Dec] [Dec] Stm
  deriving (Eq, Ord, Show, Read)

data Exp
    = Eql Exp Exp
    | Lsth Exp Exp
    | Plus Exp Exp
    | Or Exp Exp
    | Mult Exp Exp
    | And Exp Exp
    | Negt Exp
    | Not Exp
    | Intg Integer
    | TruV
    | FlsV
    | Vrbl Ident
  deriving (Eq, Ord, Show, Read)

