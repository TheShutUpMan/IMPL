-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module ParN where
import AbsN
import LexN
import ErrM

}

%name pStm Stm
%name pListStm ListStm
%name pDec Dec
%name pListDec ListDec
%name pType Type
%name pProc Proc
%name pListProc ListProc
%name pListIdent ListIdent
%name pExp Exp
%name pExp1 Exp1
%name pExp2 Exp2
%name pExp3 Exp3
%name pExp4 Exp4
%name pListExp ListExp
-- no lexer declaration
%monad { Err } { thenM } { returnM }
%tokentype {Token}
%token
  '(' { PT _ (TS _ 1) }
  ')' { PT _ (TS _ 2) }
  '*' { PT _ (TS _ 3) }
  '+' { PT _ (TS _ 4) }
  ',' { PT _ (TS _ 5) }
  ':' { PT _ (TS _ 6) }
  ':=' { PT _ (TS _ 7) }
  ';' { PT _ (TS _ 8) }
  '<' { PT _ (TS _ 9) }
  '=' { PT _ (TS _ 10) }
  'Bool' { PT _ (TS _ 11) }
  'Int' { PT _ (TS _ 12) }
  'and' { PT _ (TS _ 13) }
  'do' { PT _ (TS _ 14) }
  'else' { PT _ (TS _ 15) }
  'end' { PT _ (TS _ 16) }
  'false' { PT _ (TS _ 17) }
  'if' { PT _ (TS _ 18) }
  'neg' { PT _ (TS _ 19) }
  'not' { PT _ (TS _ 20) }
  'or' { PT _ (TS _ 21) }
  'print' { PT _ (TS _ 22) }
  'skip' { PT _ (TS _ 23) }
  'then' { PT _ (TS _ 24) }
  'true' { PT _ (TS _ 25) }
  'while' { PT _ (TS _ 26) }
  '{' { PT _ (TS _ 27) }
  '|' { PT _ (TS _ 28) }
  '}' { PT _ (TS _ 29) }

L_ident  { PT _ (TV $$) }
L_integ  { PT _ (TI $$) }


%%

Ident   :: { Ident }   : L_ident  { Ident $1 }
Integer :: { Integer } : L_integ  { (read ( $1)) :: Integer }

Stm :: { Stm }
Stm : 'skip' { AbsN.Skip }
    | 'print' Exp { AbsN.Prnt $2 }
    | Ident ':=' Exp { AbsN.Assn $1 $3 }
    | 'if' Exp 'then' Stm 'else' Stm 'end' { AbsN.Ifte $2 $4 $6 }
    | 'while' Exp 'do' Stm 'end' { AbsN.Iter $2 $4 }
    | '{' ListDec '|' ListProc '|' Stm '}' { AbsN.Blck $2 $4 $6 }
    | Ident '{' ListExp '|' ListIdent '}' { AbsN.Call $1 $3 $5 }
    | ListStm { AbsN.Seqn $1 }
ListStm :: { [Stm] }
ListStm : Stm { (:[]) $1 } | Stm ';' ListStm { (:) $1 $3 }
Dec :: { Dec }
Dec : Ident ':' Type { AbsN.Dcl $1 $3 }
ListDec :: { [Dec] }
ListDec : {- empty -} { [] }
        | Dec { (:[]) $1 }
        | Dec ';' ListDec { (:) $1 $3 }
Type :: { Type }
Type : 'Int' { AbsN.IntgT } | 'Bool' { AbsN.BoolT }
Proc :: { Proc }
Proc : Ident ':' '{' ListDec '|' ListDec '|' Stm '}' { AbsN.PDcl $1 $4 $6 $8 }
ListProc :: { [Proc] }
ListProc : {- empty -} { [] }
         | Proc { (:[]) $1 }
         | Proc ';' ListProc { (:) $1 $3 }
ListIdent :: { [Ident] }
ListIdent : {- empty -} { [] }
          | Ident { (:[]) $1 }
          | Ident ',' ListIdent { (:) $1 $3 }
Exp :: { Exp }
Exp : Exp '=' Exp { AbsN.Eql $1 $3 }
    | Exp '<' Exp { AbsN.Lsth $1 $3 }
    | Exp1 { $1 }
Exp1 :: { Exp }
Exp1 : Exp2 '+' Exp1 { AbsN.Plus $1 $3 }
     | Exp2 'or' Exp1 { AbsN.Or $1 $3 }
     | Exp2 { $1 }
Exp2 :: { Exp }
Exp2 : Exp3 '*' Exp2 { AbsN.Mult $1 $3 }
     | Exp3 'and' Exp2 { AbsN.And $1 $3 }
     | Exp3 { $1 }
Exp3 :: { Exp }
Exp3 : 'neg' Exp3 { AbsN.Negt $2 }
     | 'not' Exp3 { AbsN.Not $2 }
     | Exp4 { $1 }
Exp4 :: { Exp }
Exp4 : Integer { AbsN.Intg $1 }
     | 'true' { AbsN.TruV }
     | 'false' { AbsN.FlsV }
     | Ident { AbsN.Vrbl $1 }
     | '(' Exp ')' { $2 }
ListExp :: { [Exp] }
ListExp : {- empty -} { [] }
        | Exp { (:[]) $1 }
        | Exp ',' ListExp { (:) $1 $3 }
{

returnM :: a -> Err a
returnM = return

thenM :: Err a -> (a -> Err b) -> Err b
thenM = (>>=)

happyError :: [Token] -> Err a
happyError ts =
  Bad $ "syntax error at " ++ tokenPos ts ++ 
  case ts of
    [] -> []
    [Err _] -> " due to lexer error"
    t:_ -> " before `" ++ id(prToken t) ++ "'"

myLexer = tokens
}

