module SkelN where

-- Haskell module generated by the BNF converter

import AbsN
import ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transIdent :: Ident -> Result
transIdent x = case x of
  Ident string -> failure x
transStm :: Stm -> Result
transStm x = case x of
  Skip -> failure x
  Prnt exp -> failure x
  Assn ident exp -> failure x
  Ifte exp stm1 stm2 -> failure x
  Iter exp stm -> failure x
  Blck decs procs stm -> failure x
  Call ident exps idents -> failure x
  Seqn stms -> failure x
transDec :: Dec -> Result
transDec x = case x of
  Dcl ident type_ -> failure x
transType :: Type -> Result
transType x = case x of
  IntgT -> failure x
  BoolT -> failure x
transProc :: Proc -> Result
transProc x = case x of
  PDcl ident decs1 decs2 stm -> failure x
transExp :: Exp -> Result
transExp x = case x of
  Eql exp1 exp2 -> failure x
  Lsth exp1 exp2 -> failure x
  Plus exp1 exp2 -> failure x
  Or exp1 exp2 -> failure x
  Mult exp1 exp2 -> failure x
  And exp1 exp2 -> failure x
  Negt exp -> failure x
  Not exp -> failure x
  Intg integer -> failure x
  TruV -> failure x
  FlsV -> failure x
  Vrbl ident -> failure x

