module SkelN where

-- Haskell module generated by the BNF converter

import AbsN
import ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transIdent :: Ident -> Result
transIdent x = case x of
  Ident string -> failure x
transV :: V -> Result
transV x = case x of
  Var ident t -> failure x
transT :: T -> Result
transT x = case x of
  Int -> failure x
  Bool -> failure x
transP :: P -> Result
transP x = case x of
  Proc ident vs1 vs2 s -> failure x
transD :: D -> Result
transD x = case x of
  Dvar v -> failure x
  Dpr p -> failure x
transS :: S -> Result
transS x = case x of
  Skp -> failure x
  Prn e -> failure x
  Ass ident e -> failure x
  Cho e s1 s2 -> failure x
  Itr e s -> failure x
  Dcl d s -> failure x
  Call ident es idents -> failure x
  Seq ss -> failure x
transE :: E -> Result
transE x = case x of
  Lt e1 e2 -> failure x
  Eq e1 e2 -> failure x
  And e1 e2 -> failure x
  Or e1 e2 -> failure x
  Not e -> failure x
  Fls -> failure x
  Tr -> failure x
  Sum e1 e2 -> failure x
  Mul e1 e2 -> failure x
  Neg e -> failure x
  Iex integer -> failure x
  Idex ident -> failure x

