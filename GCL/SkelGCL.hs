module SkelGCL where

-- Haskell module generated by the BNF converter

import AbsGCL
import ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transIdent :: Ident -> Result
transIdent x = case x of
  Ident string -> failure x
transStm :: Stm -> Result
transStm x = case x of
  Stm_skip -> failure x
  StmA a -> failure x
  Stm1 guard -> failure x
  Stm2 guard -> failure x
transA :: A -> Result
transA x = case x of
  A1 ident intexpv -> failure x
  A2 ident a intexpv -> failure x
transGuard :: Guard -> Result
transGuard x = case x of
  Ass pred stm -> failure x
  Comp guard1 guard2 -> failure x
transPred :: Pred -> Result
transPred x = case x of
  F -> failure x
  Imp pred1 pred2 -> failure x
  Rel relation -> failure x
transRelation :: Relation -> Result
transRelation x = case x of
  Eq intexpv1 intexpv2 -> failure x
  Lt intexpv1 intexpv2 -> failure x
transId :: Id -> Result
transId x = case x of
  Lst ident -> failure x
transExp :: Exp -> Result
transExp x = case x of
  Els intexpv -> failure x
transIntExpV :: IntExpV -> Result
transIntExpV x = case x of
  Add intexpv1 intexpv2 -> failure x
  Mul intexpv1 intexpv2 -> failure x
  Neg intexpv -> failure x
  Nmb integer -> failure x
  Var ident -> failure x

