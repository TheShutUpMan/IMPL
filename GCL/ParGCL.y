-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module ParGCL where
import AbsGCL
import LexGCL
import ErrM

}

%name pStm Stm
%name pListStm ListStm
%name pA A
%name pGuard Guard
%name pPred Pred
%name pRelation Relation
%name pId Id
%name pListId ListId
%name pExp Exp
%name pListExp ListExp
%name pIntExpV IntExpV
%name pIntExpV1 IntExpV1
%name pIntExpV2 IntExpV2
%name pIntExpV3 IntExpV3
-- no lexer declaration
%monad { Err } { thenM } { returnM }
%tokentype {Token}
%token
  '(' { PT _ (TS _ 1) }
  ')' { PT _ (TS _ 2) }
  '*' { PT _ (TS _ 3) }
  '+' { PT _ (TS _ 4) }
  ',' { PT _ (TS _ 5) }
  '->' { PT _ (TS _ 6) }
  ':=' { PT _ (TS _ 7) }
  ';' { PT _ (TS _ 8) }
  '<' { PT _ (TS _ 9) }
  '=' { PT _ (TS _ 10) }
  '=>' { PT _ (TS _ 11) }
  'FALSE' { PT _ (TS _ 12) }
  'NEG' { PT _ (TS _ 13) }
  '[]' { PT _ (TS _ 14) }
  'do' { PT _ (TS _ 15) }
  'fi' { PT _ (TS _ 16) }
  'if' { PT _ (TS _ 17) }
  'od' { PT _ (TS _ 18) }
  'skip' { PT _ (TS _ 19) }

L_ident  { PT _ (TV $$) }
L_integ  { PT _ (TI $$) }


%%

Ident   :: { Ident }   : L_ident  { Ident $1 }
Integer :: { Integer } : L_integ  { (read ( $1)) :: Integer }

Stm :: { Stm }
Stm : 'skip' { AbsGCL.Stm_skip }
    | A { AbsGCL.StmA $1 }
    | 'if' Guard 'fi' { AbsGCL.Stm1 $2 }
    | 'do' Guard 'od' { AbsGCL.Stm2 $2 }
ListStm :: { [Stm] }
ListStm : Stm { (:[]) $1 } | Stm ';' ListStm { (:) $1 $3 }
A :: { A }
A : Ident ':=' IntExpV { AbsGCL.A1 $1 $3 }
  | Ident ',' A ',' IntExpV { AbsGCL.A2 $1 $3 $5 }
Guard :: { Guard }
Guard : Pred '->' Stm { AbsGCL.Ass $1 $3 }
      | Guard '[]' Guard { AbsGCL.Comp $1 $3 }
Pred :: { Pred }
Pred : 'FALSE' { AbsGCL.F }
     | Pred '=>' Pred { AbsGCL.Imp $1 $3 }
     | Relation { AbsGCL.Rel $1 }
Relation :: { Relation }
Relation : IntExpV '=' IntExpV { AbsGCL.Eq $1 $3 }
         | IntExpV '<' IntExpV { AbsGCL.Lt $1 $3 }
Id :: { Id }
Id : Ident { AbsGCL.Lst $1 }
ListId :: { [Id] }
ListId : Id { (:[]) $1 } | Id ',' ListId { (:) $1 $3 }
Exp :: { Exp }
Exp : IntExpV { AbsGCL.Els $1 }
ListExp :: { [Exp] }
ListExp : Exp { (:[]) $1 } | Exp ',' ListExp { (:) $1 $3 }
IntExpV :: { IntExpV }
IntExpV : IntExpV1 '+' IntExpV { AbsGCL.Add $1 $3 }
        | IntExpV1 { $1 }
IntExpV1 :: { IntExpV }
IntExpV1 : IntExpV2 '*' IntExpV1 { AbsGCL.Mul $1 $3 }
         | IntExpV2 { $1 }
IntExpV2 :: { IntExpV }
IntExpV2 : 'NEG' IntExpV2 { AbsGCL.Neg $2 } | IntExpV3 { $1 }
IntExpV3 :: { IntExpV }
IntExpV3 : Integer { AbsGCL.Nmb $1 }
         | Ident { AbsGCL.Var $1 }
         | '(' IntExpV ')' { $2 }
{

returnM :: a -> Err a
returnM = return

thenM :: Err a -> (a -> Err b) -> Err b
thenM = (>>=)

happyError :: [Token] -> Err a
happyError ts =
  Bad $ "syntax error at " ++ tokenPos ts ++ 
  case ts of
    [] -> []
    [Err _] -> " due to lexer error"
    t:_ -> " before `" ++ id(prToken t) ++ "'"

myLexer = tokens
}

