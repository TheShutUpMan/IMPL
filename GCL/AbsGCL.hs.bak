

module AbsGCL where

-- Haskell module generated by the BNF converter




newtype Ident = Ident String deriving (Eq, Ord, Show, Read)
data Stm = Stm_skip | Stm1 Id Exp | Stm2 Guard | Stm3 Guard
  deriving (Eq, Ord, Show, Read)

data Guard = Ass Pred Stm | Comp Guard Guard
  deriving (Eq, Ord, Show, Read)

data Pred = F | Imp Pred Pred | Rel Relation
  deriving (Eq, Ord, Show, Read)

data Relation = Eq IntExpV IntExpV | Lt IntExpV IntExpV
  deriving (Eq, Ord, Show, Read)

data Id = Lst Ident
  deriving (Eq, Ord, Show, Read)

data Exp = Els IntExpV
  deriving (Eq, Ord, Show, Read)

data IntExpV
    = Add IntExpV IntExpV
    | Mul IntExpV IntExpV
    | Neg IntExpV
    | Nmb Integer
    | Var Ident
  deriving (Eq, Ord, Show, Read)

