-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module ParSmall where
import AbsSmall
import LexSmall
import ErrM

}

%name pP P
%name pListIdent ListIdent
%name pE E
%name pE1 E1
%name pE2 E2
%name pE3 E3
%name pR R
-- no lexer declaration
%monad { Err } { thenM } { returnM }
%tokentype {Token}
%token
  '(' { PT _ (TS _ 1) }
  ')' { PT _ (TS _ 2) }
  '+' { PT _ (TS _ 3) }
  ',' { PT _ (TS _ 4) }
  ';' { PT _ (TS _ 5) }
  '<' { PT _ (TS _ 6) }
  '=' { PT _ (TS _ 7) }
  '=>' { PT _ (TS _ 8) }
  'F' { PT _ (TS _ 9) }

L_ident  { PT _ (TV $$) }
L_integ  { PT _ (TI $$) }


%%

Ident   :: { Ident }   : L_ident  { Ident $1 }
Integer :: { Integer } : L_integ  { (read ( $1)) :: Integer }

P :: { P }
P : '(' ListIdent ';' ListIdent ';' E ')' { AbsSmall.Top $2 $4 $6 }
ListIdent :: { [Ident] }
ListIdent : {- empty -} { [] }
          | Ident { (:[]) $1 }
          | Ident ',' ListIdent { (:) $1 $3 }
E :: { E }
E : E1 '=>' E { AbsSmall.Implies $1 $3 } | E1 { $1 }
E1 :: { E }
E1 : E2 R E2 { AbsSmall.Rel $1 $2 $3 } | E2 { $1 }
E2 :: { E }
E2 : E3 '+' E2 { AbsSmall.Plus $1 $3 } | E3 { $1 }
E3 :: { E }
E3 : Integer { AbsSmall.Nmb $1 }
   | Ident { AbsSmall.Var $1 }
   | 'F' { AbsSmall.Fls }
   | '(' E ')' { $2 }
R :: { R }
R : '=' { AbsSmall.Eql } | '<' { AbsSmall.Lth }
{

returnM :: a -> Err a
returnM = return

thenM :: Err a -> (a -> Err b) -> Err b
thenM = (>>=)

happyError :: [Token] -> Err a
happyError ts =
  Bad $ "syntax error at " ++ tokenPos ts ++ 
  case ts of
    [] -> []
    [Err _] -> " due to lexer error"
    t:_ -> " before `" ++ id(prToken t) ++ "'"

myLexer = tokens
}

