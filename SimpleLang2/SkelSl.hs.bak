module SkelSl where

-- Haskell module generated by the BNF converter

import AbsSl
import ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transIdent :: Ident -> Result
transIdent x = case x of
  Ident string -> failure x
transIntVar :: IntVar -> Result
transIntVar x = case x of
  IntVar string -> failure x
transP :: P -> Result
transP x = case x of
  Prog i1 i2 s -> failure x
transS :: S -> Result
transS x = case x of
transU :: U -> Result
transU x = case x of
  U_puti -> failure x
  U_putb -> failure x
transVi :: Vi -> Result
transVi x = case x of
  ViIdent ident -> failure x
  ViInteger integer -> failure x
transVb :: Vb -> Result
transVb x = case x of
  VbIdent ident -> failure x
  Vb_TRUE -> failure x
  Vb_FALSE -> failure x
transI :: I -> Result
transI x = case x of
  I1 ident i -> failure x
  IIdent ident -> failure x

