-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module ParSl where
import AbsSl
import LexSl
import ErrM

}

%name pP P
%name pS S
%name pS1 S1
%name pU U
%name pVi Vi
%name pVb Vb
%name pI I
-- no lexer declaration
%monad { Err } { thenM } { returnM }
%tokentype {Token}
%token
  '(' { PT _ (TS _ 1) }
  ')' { PT _ (TS _ 2) }
  ',' { PT _ (TS _ 3) }
  ':' { PT _ (TS _ 4) }
  ':=' { PT _ (TS _ 5) }
  ';' { PT _ (TS _ 6) }
  'FALSE' { PT _ (TS _ 7) }
  'TRUE' { PT _ (TS _ 8) }
  'putb' { PT _ (TS _ 9) }
  'puti' { PT _ (TS _ 10) }

L_ident  { PT _ (TV $$) }
L_integ  { PT _ (TI $$) }
L_IntVar { PT _ (T_IntVar $$) }


%%

Ident   :: { Ident }   : L_ident  { Ident $1 }
Integer :: { Integer } : L_integ  { (read ( $1)) :: Integer }
IntVar    :: { IntVar} : L_IntVar { IntVar ($1)}

P :: { P }
P : I ':' I ':' S { AbsSl.Prog $1 $3 $5 }
S :: { S }
S : IntVar ':=' Vi { AbsSl.iass_ $1 $3 } | S1 { $1 }
S1 :: { S }
S1 : Ident ':=' Vb { AbsSl.bass_ $1 $3 }
   | U Ident { AbsSl.print_ $1 $2 }
   | S ';' S { AbsSl.comp_ $1 $3 }
   | '(' S ')' { $2 }
U :: { U }
U : 'puti' { AbsSl.U_puti } | 'putb' { AbsSl.U_putb }
Vi :: { Vi }
Vi : Ident { AbsSl.ViIdent $1 } | Integer { AbsSl.ViInteger $1 }
Vb :: { Vb }
Vb : Ident { AbsSl.VbIdent $1 }
   | 'TRUE' { AbsSl.Vb_TRUE }
   | 'FALSE' { AbsSl.Vb_FALSE }
I :: { I }
I : Ident ',' I { AbsSl.I1 $1 $3 } | Ident { AbsSl.IIdent $1 }
{

returnM :: a -> Err a
returnM = return

thenM :: Err a -> (a -> Err b) -> Err b
thenM = (>>=)

happyError :: [Token] -> Err a
happyError ts =
  Bad $ "syntax error at " ++ tokenPos ts ++ 
  case ts of
    [] -> []
    [Err _] -> " due to lexer error"
    t:_ -> " before `" ++ id(prToken t) ++ "'"

myLexer = tokens
}

