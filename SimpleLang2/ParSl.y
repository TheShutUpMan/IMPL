-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module ParSl where
import AbsSl
import LexSl
import ErrM

}

%name pProg Prog
%name pStm Stm
%name pListStm ListStm
%name pBVal BVal
%name pIVal IVal
-- no lexer declaration
%monad { Err } { thenM } { returnM }
%tokentype {Token}
%token
  ':=' { PT _ (TS _ 1) }
  ';' { PT _ (TS _ 2) }
  'FALSE' { PT _ (TS _ 3) }
  'TRUE' { PT _ (TS _ 4) }
  'putb' { PT _ (TS _ 5) }
  'puti' { PT _ (TS _ 6) }

L_integ  { PT _ (TI $$) }
L_BIdent { PT _ (T_BIdent $$) }
L_IIdent { PT _ (T_IIdent $$) }


%%

Integer :: { Integer } : L_integ  { (read ( $1)) :: Integer }
BIdent    :: { BIdent} : L_BIdent { BIdent ($1)}
IIdent    :: { IIdent} : L_IIdent { IIdent ($1)}

Prog :: { Prog }
Prog : ListStm { AbsSl.Pgm $1 }
Stm :: { Stm }
Stm : BIdent ':=' BVal { AbsSl.Assb $1 $3 }
    | IIdent ':=' IVal { AbsSl.Assi $1 $3 }
    | 'putb' BVal { AbsSl.Putb $2 }
    | 'puti' IVal { AbsSl.Puti $2 }
ListStm :: { [Stm] }
ListStm : Stm { (:[]) $1 } | Stm ';' ListStm { (:) $1 $3 }
BVal :: { BVal }
BVal : BIdent { AbsSl.BValBIdent $1 }
     | 'TRUE' { AbsSl.BVal_TRUE }
     | 'FALSE' { AbsSl.BVal_FALSE }
IVal :: { IVal }
IVal : IIdent { AbsSl.IValIIdent $1 }
     | Integer { AbsSl.IValInteger $1 }
{

returnM :: a -> Err a
returnM = return

thenM :: Err a -> (a -> Err b) -> Err b
thenM = (>>=)

happyError :: [Token] -> Err a
happyError ts =
  Bad $ "syntax error at " ++ tokenPos ts ++ 
  case ts of
    [] -> []
    [Err _] -> " due to lexer error"
    t:_ -> " before `" ++ id(prToken t) ++ "'"

myLexer = tokens
}

